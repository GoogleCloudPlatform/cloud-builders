steps:
# Run tests.
- name: 'golang:stretch'
  entrypoint: 'go'
  args: ['build', './...']

# Build the gcs-fetcher binary and put into the builder image.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '--build-arg=cmd=./cmd/gcs-fetcher/', '-t', 'gcr.io/$PROJECT_ID/gcs-fetcher', '.']
- name: 'gcr.io/$PROJECT_ID/gcs-fetcher'
  args: ['--help']

# Build the gcs-uploader binary and put it into the builder image.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '--build-arg=cmd=./cmd/gcs-uploader/', '-t', 'gcr.io/$PROJECT_ID/gcs-uploader', '.']
- name: 'gcr.io/$PROJECT_ID/gcs-uploader'
  args: ['--help']

# Test the manifest uploader with a defined manifest location.
- name: 'gcr.io/$PROJECT_ID/gcs-uploader'
  args:
  - '--location=gs://${PROJECT_ID}_cloudbuild/manifest-${BUILD_ID}.json'
# Print the manifest.
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cat', 'gs://${PROJECT_ID}_cloudbuild/manifest-${BUILD_ID}.json']
# Fetch the manifest.
- name: 'gcr.io/$PROJECT_ID/gcs-fetcher'
  args:
  - '--type=Manifest'
  - '--location=gs://${PROJECT_ID}_cloudbuild/manifest-${BUILD_ID}.json'
  - '--dest_dir=fetched'
# Check that files were downloaded.
- name: 'ubuntu'
  args: ['cat', 'fetched/cloudbuild.yaml']

# Push the images.
images:
- 'gcr.io/$PROJECT_ID/gcs-fetcher'
- 'gcr.io/$PROJECT_ID/gcs-uploader'

timeout: '2100s'
